/*
 * GereClientes.java
 */
package gereclientes;

import com.sun.corba.se.impl.transport.ReadTCPTimeoutsImpl;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.*;
import java.util.*;
import java.io.*;

import org.jdesktop.application.SingleFrameApplication;

/**
 * The application's main frame.
 */
public class GereClientes extends FrameView implements Observer{

    Clientes clientes = null;
    Cliente clienteActual;

    public GereClientes(SingleFrameApplication app) {

        super(app);
        initComponents();

        this.clientes = new Clientes();
        this.clientes.addObserver(this);

        /** update method();
         *
         */

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = GereClientesApp.getApplication().getMainFrame();
            aboutBox = new GereClientesAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        GereClientesApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        mainPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jButtonPesquisa = new javax.swing.JButton();
        jTextMorada = new javax.swing.JTextField();
        jTextNif = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextNome = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButtonApaga = new javax.swing.JButton();
        jButtonLimpar = new javax.swing.JButton();
        jButtonSalva = new javax.swing.JButton();
        jButtonPesquisar = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu jMenuEntryCarregarFicheiro = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuListaClientes = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        jStatusLabel = new javax.swing.JLabel();
        jFrame1 = new javax.swing.JFrame();

        mainPanel.setMaximumSize(new java.awt.Dimension(530, 260));
        mainPanel.setName("mainPanel"); // NOI18N

        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel1.setName("jPanel1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(gereclientes.GereClientesApp.class).getContext().getResourceMap(GereClientes.class);
        jButtonPesquisa.setText(resourceMap.getString("jButtonPesquisa.text")); // NOI18N
        jButtonPesquisa.setName("jButtonPesquisa"); // NOI18N
        jButtonPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPesquisaActionPerformed(evt);
            }
        });

        jTextMorada.setText(resourceMap.getString("jTextMorada.text")); // NOI18N
        jTextMorada.setName("jTextMorada"); // NOI18N

        jTextNif.setText(resourceMap.getString("jTextNif.text")); // NOI18N
        jTextNif.setName("jTextNif"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jTextNome.setText(resourceMap.getString("jTextNome.text")); // NOI18N
        jTextNome.setName("jTextNome"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTextNome, org.jdesktop.beansbinding.ObjectProperty.create(), jLabel1, org.jdesktop.beansbinding.BeanProperty.create("labelFor"));
        bindingGroup.addBinding(binding);

        jButtonApaga.setText(resourceMap.getString("jButtonApaga.text")); // NOI18N
        jButtonApaga.setName("jButtonApaga"); // NOI18N
        jButtonApaga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonApagaActionPerformed(evt);
            }
        });

        jButtonLimpar.setText(resourceMap.getString("jButtonLimpar.text")); // NOI18N
        jButtonLimpar.setName("jButtonLimpar"); // NOI18N
        jButtonLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimparActionPerformed(evt);
            }
        });

        jButtonSalva.setText(resourceMap.getString("jButtonSalva.text")); // NOI18N
        jButtonSalva.setName("jButtonSalva"); // NOI18N
        jButtonSalva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvaActionPerformed(evt);
            }
        });

        jButtonPesquisar.setText(resourceMap.getString("jButtonPesquisar.text")); // NOI18N
        jButtonPesquisar.setName("jButtonPesquisar"); // NOI18N
        jButtonPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPesquisarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(jButtonPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonApaga)
                        .addComponent(jButtonLimpar)
                        .addComponent(jButtonSalva)
                        .addComponent(jButtonPesquisar))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextNome, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextNif)
                            .addComponent(jTextMorada, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jTextMorada, jTextNif, jTextNome});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextNome, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextMorada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextNif, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jButtonPesquisa))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonApaga)
                            .addComponent(jButtonLimpar)
                            .addComponent(jButtonSalva)
                            .addComponent(jButtonPesquisar)))))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jTextMorada, jTextNif, jTextNome});

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(597, 597, 597)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(82, Short.MAX_VALUE))
        );

        menuBar.setName("menuBar"); // NOI18N

        jMenuEntryCarregarFicheiro.setText(resourceMap.getString("jMenuEntryCarregarFicheiro.text")); // NOI18N
        jMenuEntryCarregarFicheiro.setName("jMenuEntryCarregarFicheiro"); // NOI18N

        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenuEntryCarregarFicheiro.add(jMenuItem1);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(gereclientes.GereClientesApp.class).getContext().getActionMap(GereClientes.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        jMenuEntryCarregarFicheiro.add(exitMenuItem);

        menuBar.add(jMenuEntryCarregarFicheiro);

        jMenu1.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu1.setName("jMenu1"); // NOI18N

        jMenuListaClientes.setText(resourceMap.getString("jMenuListaClientes.text")); // NOI18N
        jMenuListaClientes.setName("jMenuListaClientes"); // NOI18N
        jMenuListaClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuListaClientesActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuListaClientes);

        menuBar.add(jMenu1);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        jStatusLabel.setText(resourceMap.getString("jStatusLabel.text")); // NOI18N
        jStatusLabel.setName("jStatusLabel"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusMessageLabel)
                    .addComponent(jStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jStatusLabel))
                .addGap(8, 8, 8)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel))
                .addGap(3, 3, 3))
        );

        jFrame1.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        jFrame1.setName("jFrame1"); // NOI18N

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Apresenta ao utilizador a hipotese de encontrar um cliente
     */

    private void jButtonPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPesquisaActionPerformed

}//GEN-LAST:event_jButtonPesquisaActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JFileChooser abreFicheiro = new JFileChooser ();
        JFrame mainFrame = GereClientesApp.getApplication().getMainFrame();
        int option = abreFicheiro.showOpenDialog(mainFrame);
        if (option == JFileChooser.APPROVE_OPTION){
            File sf = abreFicheiro.getSelectedFile();
            this.readClientesInTextMode(18000, sf.getAbsolutePath());
        }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButtonPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPesquisarActionPerformed
        JFrame mainFrame = GereClientesApp.getApplication().getMainFrame();
        int n = JOptionPane.showInternalOptionDialog(mainFrame.getContentPane(), "Deseja efectuar a pesquisa por nome ou por nif ?",
            "Escolha do tipo de Pesquisa", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE,
                null, new Object[]{"Nome", "Nif"}, "Nome");
        if (n != JOptionPane.CLOSED_OPTION)
            if (n ==  0){
                String s = JOptionPane.showInputDialog("Introduza o nome do cliente: ");
                if (s != null ){
                    try  { this.clienteActual = this.clientes.get(s);}
                    catch (ClientesException e) {     JOptionPane.showMessageDialog(mainFrame.getContentPane(), e.getMessage());}
                }
            }
            else{
                      String s = JOptionPane.showInputDialog("Introduza o nif do cliente");
                      if ( s != null) {
                               try { this.clienteActual = this.clientes.get((int) Integer.parseInt(s));}
                               catch ( ClientesException e ) { JOptionPane.showMessageDialog(mainFrame.getContentPane(), e.getCause()); }
                               catch ( NumberFormatException e) { JOptionPane.showMessageDialog(mainFrame.getContentPane(), "Nao introduziu um número válido"); }
                      }
            }
        this.displayCliente();
}//GEN-LAST:event_jButtonPesquisarActionPerformed

    private void jButtonSalvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvaActionPerformed
         Cliente tmp = this.isValidCliente();
        JFrame mainFrame = GereClientesApp.getApplication().getMainFrame();
         try {
            this.clientes.add(tmp);
        }catch ( ClientesException e ) {
            JOptionPane.showMessageDialog(mainFrame.getContentPane(), e.getMessage());
            return;
        }
        this.clienteActual = tmp;
    }//GEN-LAST:event_jButtonSalvaActionPerformed

    
    private void jButtonApagaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonApagaActionPerformed
        JFrame mainFrame = GereClientesApp.getApplication().getMainFrame();
        if (this.clienteActual == null) {
            JOptionPane.showMessageDialog(mainFrame.getContentPane(), "Não existe nenhum cliente actual , Utilize a pesquisa para seleccionar clientes!");
            return;
        }
 else {
            int n = JOptionPane.showConfirmDialog(mainFrame.getContentPane(), "Deseja remover " + this.clienteActual.toString() + "?", "Remover Cliente?", JOptionPane.YES_NO_OPTION);
            if (n != 0) {
                return;
            }
        }
        try {
            this.clientes.remove(clienteActual);
        } catch (ClientesException e) {
            JOptionPane.showMessageDialog(mainFrame.getContentPane(), "Cliente não existente");
    }//GEN-LAST:event_jButtonApagaActionPerformed
    Collection clientes = this.clientes.getValues();
    if (clientes.iterator().hasNext() ){
        this.clienteActual = (Cliente ) clientes.iterator().next();
    }
    else this.clienteActual = null;

    this.displayCliente();
    }

        private void jButtonLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimparActionPerformed
            this.clienteActual = null;
            this.displayCliente();
}//GEN-LAST:event_jButtonLimparActionPerformed

        private void jMenuListaClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuListaClientesActionPerformed
            JFrame mainFrame = GereClientesApp.getApplication().getMainFrame();
            String s = JOptionPane.showInputDialog(mainFrame.getContentPane(), "Introduza o nome de pesquisa", "Lista de Clientes", JOptionPane.QUESTION_MESSAGE);
            if (s == null) return ;

            LinkedList<Cliente> nova = new LinkedList<Cliente>();
            for (Cliente tmp : this.clientes.getValues()){
                if (tmp.getNome().contains(s)){
                    nova.add(tmp.clone());
                }
            }

            ListaCliente.main(nova);
            
        }//GEN-LAST:event_jMenuListaClientesActionPerformed

    private Cliente isValidCliente() {
      int nif;
      JFrame mainFrame = GereClientesApp.getApplication().getMainFrame();
         try{
             nif = (int ) Integer.parseInt(jTextNif.getText() );
         }catch (NumberFormatException e ) {
             JOptionPane.showMessageDialog(mainFrame.getContentPane(), "Introduza um número válido"); return null;
        }

        if (jTextNome.getText().isEmpty()) {
            JOptionPane.showMessageDialog(mainFrame.getContentPane(), "Introduza um nome válido");
            return null;
        }
 else if (jTextMorada.getText().isEmpty()) {
            JOptionPane.showMessageDialog(mainFrame.getContentPane(), "Introduza uma morada válida");
            return null;
        }

        return new Cliente(jTextNome.getText(), nif, jTextMorada.getText());
    }

  private void displayCliente() {
if (this.clienteActual != null){
      this.jTextMorada.setText(this.clienteActual.getMorada());
        this.jTextNif.setText((new Integer(this.clienteActual.getNif())).toString());
        this.jTextNome.setText(this.clienteActual.getNome());
    }
else {
    this.jTextMorada.setText("");
    this.jTextNif.setText("");
    this.jTextNome.setText("");

      }
  }
  public void update(Observable o, java.lang.Object arg) {
        this.jStatusLabel.setText("Nº de clientes actuais :" +  this.clientes.getCount() );
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonApaga;
    private javax.swing.JButton jButtonLimpar;
    private javax.swing.JButton jButtonPesquisa;
    private javax.swing.JButton jButtonPesquisar;
    private javax.swing.JButton jButtonSalva;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuListaClientes;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel jStatusLabel;
    private javax.swing.JTextField jTextMorada;
    private javax.swing.JTextField jTextNif;
    private javax.swing.JTextField jTextNome;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;

    public void readClientesInTextMode(int num, String path){
        String linha = "";
        StringTokenizer str;
        String nome, morada;
       // Clientes clientes = new Clientes();
        int   nif;
        int cont = 0;
        int i =0 ;
        BufferedReader ficheiro = null;
        //abrir para leitura o ficheiro.
        try {  ficheiro = new BufferedReader(new FileReader(path));}
        catch (IOException e){  System.out.println(e.getMessage()); return ; }

        try {
            while (ficheiro.ready() && i <= num) { //enquanto não chegar ao fim do ficheiro
                linha = ficheiro.readLine(); //ler uma linha
                cont++;
                str = new StringTokenizer(linha,";"); // ; é o separador de campos
                //obter o nif
                nif = Integer.parseInt(str.nextToken());
                //obter o nome
                nome = str.nextToken();
                //obter o endereço
                morada = str.nextToken();

                //Criar objecto e inserir
                i++;
            try { this.clientes.add(new Cliente(nome, nif, morada));}
            catch (ClientesException  e) { System.out.println(e.getMessage()); }

        }
        ficheiro.close();
        } catch (IOException e) {
            System.err.println(e.toString());
        }
    }
}
